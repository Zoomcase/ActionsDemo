name: Infrastructure

on:
  pull_request:
    paths:
      - "IAC/**"
      - ".github/workflows/iac.yml"
    types:
      - opened
      - synchronize
      - reopened
      - closed
      - labeled

jobs:
  terraform:
    name: Verify and deploy infrastructure changes
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_VAR_sqlsvr_admin_password: ${{ secrets.SQLSVR_ADMIN_PASSWORD }}
    defaults:
      run:
        working-directory: IAC/environments

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Check format
        run: terraform fmt
        id: fmt

      - name: Init
        run: terraform init
        id: init

      - name: Terraform Validate
        run: terraform validate -no-color
        id: validate

      - name: Plan
        if: github.event.label.name != 'destroy'
        run: terraform plan -no-color -out=terraform.plan
        id: plan

      - name: Plan (destroy)
        if: github.event.label.name == 'destroy'
        run: terraform plan -no-color -out=terraform.destroy.plan
        id: plan_destroy

      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"

      - name: Post status
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization \`${{ steps.init.outcome }}\`
            #### Terraform Validation ${{ steps.validate.outputs.stdout }}
            #### Terraform Plan \`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`${process.env.PLAN}\`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
              
            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Apply
        run: terraform apply -no-color -auto-approve terraform.plan
        if: github.event_name == 'pull_request' && github.event.action == 'labeled' && github.event.label.name == 'apply'
        id: apply

      - name: Destroy
        run: terraform destroy -no-color -auto-approve
        if: github.event_name == 'pull_request' && github.event.action == 'labeled' && github.event.label.name == 'destroy'
        id: destroy
